vrun () {
  eval 'vagrant ssh -c'" \"${@:1} \""
}

vkill () {
  vagrant global-status | grep running | cut -c 1-9 | while read line; do echo $line; vagrant suspend $line; done
  cd 
}
ds () {
  du -s * | sort -n
}

change-profile () { echo -e "\033]50;SetProfile=$1\a" }

govm () {
  change-profile stretch
  vagrant ssh
  change-profile v
}

cloud () {
  change-profile $1
  docker-machine ssh $1
  change-profile v
}

ddm () {
  docker-machine rm -y $1
}

newday () {
  jump today 
  unmark today -y
  cd ~/Workspace/diary
  mkdir  "$1"
  cd  "$1"
  mark "$1" .
  mark today .
}

whitespace () {
  tr -s " " < $1 | tee $1
}

help () {
  set -e
  if (( $# < 2 )); then
    echo "Illegal number of parameters"   
  fi
  if [ "$1" = "add" ]; then
    echo "$@" >> ~/dotfiles/helpfile
  elif [ "$1" = "find" ]; then
    grep $2 ~/dotfiles/helpfile
  else
   echo "#help add or help find"
  fi
}


sc () {
  sed -n '/scripts/,$p' package.json |more
}

pa () {
  sed -n '/dependencies/,$p' package.json |more
}

gol () {
  cd `ls -trd */ |tail -1`
  ls
  (($#)) && [ -f README.md ] && more README.md || echo ""
}

gof () {
  cd `ls -trd */ |head -1`
  ls
  (($#)) && [ -f README.md ] && more README.md || echo ""
}

gito () {
  git branch "$1"
  git checkout "$1"
}

gitq () {
  git add .
  git commit -m $1
}



jsx () {
  for i in *.jsx
    do mv  $i `ls $i |awk -F  'x' '{print $1}'`
    done
}

cow () {
  df -h 
  du -sh ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2
}

box () { t="$1xxxx";c=${2:-=}; echo ${t//?/$c}; echo "$c $1 $c"; echo ${t//?/$c}; }

lcd () { 
    cd "$@" && ls; 
}

gousb () {
  df -h | grep Volumes| awk -F "Volumes/" '{print $2}'
  cd /Volumes/$(df -h | grep Volumes| awk -F "Volumes/" '{print $2}')
}

jump () { 
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}

unbindport () {
  echo "unbinding:$1"
  docker ps -a | grep 0.0.0.0:$1| awk -F " "  '{print $1}' 
  docker stop $(docker ps -a | grep 0.0.0.0:$1| awk -F " "  '{print $1}')
  docker stop $(docker ps -a | grep $1| awk -F " "  '{print $1}')
}

jumpls () { 
    cd -P "$MARKPATH/$1" && ls 2>/dev/null || echo "No such mark: $1"
}

mark () { 
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
unmark () { 
    rm -if "$MARKPATH/$1"
}
marks () {
    ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}

unmarkall () {
  for i in `marks  | awk -F" " '{print $2}'`
  do
  unmark $i
  done
}

_completemarks () {
  reply=($(ls $MARKPATH))
}

compctl -K _completemarks jump
compctl -K _completemarks unmark

mcd () {
  mkdir "$1"
  cd "$1"
}

grab () {
  git clone $1
  cd `echo $1 | awk -F "/" '{print $5}' | awk -F ".git" '{print $1}'`
  npm install
}

cleanproj (){
  find . -type f -name '*.jpeg' -exec xattr -c {}  \;
  find . -type f -name '*.png' -exec xattr -c {} \;
  find . -type f -name '*.tif' -exec xattr -c {} \;
}

syncDotFiles (){
  # Check if $1 is a git repository
    stat "$1" > /dev/null || return 1;
    cd $1; echo "Checking $PWD";
    git status --porcelain || return 1; # A fatal error if $PWD is not a git repo
    git add .
    git commit -m "update dotfiles"
    git push origin master
}



